{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerURl","setTrailerURl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","console","log","URL","search","urlParams","URLSearchParams","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAOeA,E,OAJEC,EAAMC,OAAO,CAC1BC,QAAS,+B,wCC2DEC,MAvDf,YAA4C,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,WAC3B,EAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAmCA,OAjCAC,qBAAU,WAAK,4CACX,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIT,GADpC,cACUU,EADV,OAEIN,EAAUM,EAAQC,KAAKC,SAF3B,kBAGWF,GAHX,4CADW,uBAAC,WAAD,wBAMXG,KACD,CAACb,IA2BA,sBAAKc,UAAU,MAAf,UACI,oBAAIA,UAAU,YAAd,SAA2Bf,IAC/B,qBAAKe,UAAU,cAAf,SACKX,EAAOY,KAAI,SAAAC,GAAK,OACb,qBAEAC,QAAS,kBAvBD,SAACD,GACdX,EACCC,EAAc,IAEdY,KAAkB,OAALF,QAAK,IAALA,OAAA,EAAAA,EAAOG,OAAQ,IAC3BC,MAAK,SAACC,GACHC,QAAQC,IAAI,IAAIC,IAAIH,GAAKI,QACzB,IAAMC,EAAa,IAAIC,gBAAiB,IAAIH,IAAIH,GAAKI,QACrDH,QAAQC,IAAIG,GACZpB,EAAcoB,EAAUjB,IAAI,SAG/BmB,OAAM,SAACC,GAAD,OAAWP,QAAQO,MAAMA,MAWbC,CAAYd,IAC3BF,UAAS,qBAAgBb,GAAc,mBACvC8B,IAAG,UAhDF,wCAgDE,OAAgB9B,EAAae,EAAMgB,YAAchB,EAAMiB,eAAiBC,IAAKlB,EAAMG,MAHjFH,EAAMmB,SAMjB9B,GAAc,cAAC,IAAD,CAAS+B,QAAS/B,EAAYgC,KApCrC,CACTC,OAAQ,MACRC,MAAO,OACPC,WAAY,CACRC,SAAU,UCzBhBC,EAAU,mCAaDC,EAXE,CACbC,cAAa,qCAAiCF,EAAjC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,0BAAD,OAA4BL,EAA5B,mBACjBM,kBAAkB,0BAAD,OAA4BN,EAA5B,mBACjBO,kBAAkB,0BAAD,OAA4BP,EAA5B,mBACjBQ,mBAAmB,0BAAD,OAA4BR,EAA5B,sBAClBS,mBAAmB,0BAAD,OAA4BT,EAA5B,oB,MC+CPU,MApDf,WACI,IAakBC,EAAKC,EAbvB,EAA0BpD,mBAAS,IAAnC,mBAAOc,EAAP,KAAcuC,EAAd,KAgBA,OAbAhD,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,sEAC0Bb,EAAMc,IAAIkC,EAASE,uBAD7C,OACUnC,EADV,OAEI6C,EAAS7C,EAAQC,KAAKC,QAClB4C,KAAKC,MAAMD,KAAKE,SAAWhD,EAAQC,KAAKC,QAAQ+C,OAAO,KAH/D,4CADY,uBAAC,WAAD,wBAOZ9C,KACD,IAMC,yBAAQC,UAAU,SACd8C,MAAO,CACHC,eAAgB,QAChBC,gBAAgB,iEAAD,cAC2B9C,QAD3B,IAC2BA,OAD3B,EAC2BA,EAAOiB,cADlC,4BAGf8B,mBAAoB,iBAN5B,UAQI,sBAAKjD,UAAU,kBAAf,UACI,oBAAIA,UAAU,eAAd,UACU,OAALE,QAAK,IAALA,OAAA,EAAAA,EAAOjB,SAAP,OAAgBiB,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAOG,QAAvB,OAA+BH,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAOgD,iBAE3C,sBAAKlD,UAAU,iBAAf,UACI,wBAAQA,UAAU,gBAAlB,kBAGA,wBAAQA,UAAU,gBAAlB,wBAKJ,qBAAKA,UAAU,qBAAf,UAzBMuC,EA0BO,OAACrC,QAAD,IAACA,OAAD,EAACA,EAAOiD,SA1BVX,EA0BmB,KAzB5B,OAAHD,QAAG,IAAHA,OAAA,EAAAA,EAAKM,QAAQL,EAAID,EAAIa,OAAO,EAAGZ,EAAE,GAAK,MAAQD,QA6B7C,qBAAKvC,UAAU,2B,MCjBhBqD,MA7Bf,WACI,MAA2BjE,oBAAS,GAApC,mBAAOkE,EAAP,KAAaC,EAAb,KAWA,OAVA9D,qBAAU,WAMN,OALA+D,OAAOC,iBAAiB,UAAU,WAC3BD,OAAOE,QAAU,IAChBH,GAAW,GACRA,GAAW,MAEf,WACHC,OAAOG,oBAAoB,SAAU,UAIzC,sBAAK3D,UAAS,iBAAYsD,GAAQ,aAAlC,UACI,qBACItD,UAAU,WACViB,IAAI,mHACJG,IAAI,iBAER,qBAAKpB,UAAU,aACViB,IAAI,0FACJG,IAAI,eCGNwC,MApBf,WACE,OACE,sBAAK5D,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CACIf,MAAM,oBACNC,SAAU2C,EAASE,sBACnB5C,YAAU,IACd,cAAC,EAAD,CAAKF,MAAM,eAAeC,SAAU2C,EAASC,gBAC7C,cAAC,EAAD,CAAK7C,MAAM,YAAYC,SAAU2C,EAASG,gBAC1C,cAAC,EAAD,CAAK/C,MAAM,gBAAgBC,SAAU2C,EAASI,oBAC9C,cAAC,EAAD,CAAKhD,MAAM,gBAAgBC,SAAU2C,EAASK,oBAC9C,cAAC,EAAD,CAAKjD,MAAM,gBAAgBC,SAAU2C,EAASM,oBAC9C,cAAC,EAAD,CAAKlD,MAAM,iBAAiBC,SAAU2C,EAASO,qBAC/C,cAAC,EAAD,CAAKnD,MAAM,gBAAgBC,SAAU2C,EAASQ,yBCVrCwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzD,MAAK,YAAkD,IAA/C0D,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.98bdc07a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https:api.themoviedb.org/3\"\r\n})\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport \"./Row.css\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_URL = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}){\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerURl, setTrailerURl] = useState(\"\");\r\n\r\n    useEffect(() =>{\r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results)\r\n            return request;\r\n        }\r\n        fetchData()\r\n    }, [fetchUrl])\r\n\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"100%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    }\r\n    \r\n    const handleClick = (movie) => {\r\n        if(trailerURl){\r\n            setTrailerURl('')\r\n        } else {\r\n            movieTrailer(movie?.name || \"\")\r\n            .then((url) => {\r\n                console.log(new URL(url).search)\r\n                const urlParams  = new URLSearchParams( new URL(url).search );\r\n                console.log(urlParams)\r\n                setTrailerURl(urlParams.get(\"v\"))\r\n\r\n            })\r\n            .catch((error) => console.error(error));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2 className=\"row_title\">{title}</h2>\r\n        <div className=\"row_posters\">\r\n            {movies.map(movie=>(\r\n                <img \r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n                className={`row_poster ${isLargeRow && \"row_posterLarge\" }`}\r\n                src={`${base_URL}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}/>\r\n            ))}\r\n        </div>\r\n        { trailerURl && <YouTube videoId={trailerURl} opts={opts}/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","const API_KEY = \"0775bcfdf3ad476f11be30fb94195c91\";\r\n\r\nconst requests = {\r\n    fetchTrending : `/trending/all/week?api_key=${API_KEY}&language=en=US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en=US`,\r\n    fetchActionMovies: `discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, {useState, useEffect} from 'react'\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        async function fetchData(){\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length-1)\r\n            ])\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    function truncate(str, n){\r\n        return str?.length >n ? str.substr(0, n-1) + \"...\" : str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\r\n                    \"http://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n                    )`,\r\n                backgroundPosition: \"center center\",\r\n            }}>\r\n            <div className=\"banner_contents\">\r\n                <h1 className=\"banner_title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner_buttons\">\r\n                    <button className=\"banner_button\">\r\n                        Play\r\n                    </button>\r\n                    <button className=\"banner_button\">\r\n                        My List\r\n                    </button>\r\n                </div>\r\n\r\n                <div className=\"banner_description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </div>\r\n\r\n            </div>\r\n                <div className=\"banner--fadeBottom\">\r\n                    \r\n                </div>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, {useEffect, useState } from 'react'\r\nimport \"./Navbar.css\"\r\n\r\nfunction Navbar() {\r\n    const [show, handleShow] = useState(false);\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () =>{\r\n            if(window.scrollY > 100) {\r\n                handleShow(true);\r\n            } else handleShow(false)\r\n        });\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", null);\r\n        };\r\n    })\r\n    return (\r\n        <div className={`navbar ${show && \"nav_black\"}`}>\r\n            <img \r\n                className=\"nav_logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            <img className=\"nav_avatar\" \r\n                 src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/bb3a8833850498.56ba69ac33f26.png\"\r\n                 alt=\"Avatar\"\r\n            />\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Navbar from './Navbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Banner/>\n      <Row \n          title=\"NETFLIX ORIGINALS\" \n          fetchUrl={requests.fetchNetflixOriginals}\n          isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}